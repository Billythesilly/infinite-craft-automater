function simulateDragAndDrop(element, startX, startY, targetX, targetY, steps = 10) {
  function triggerMouseEvent(target, eventType, clientX, clientY) {
    const event = new MouseEvent(eventType, {
      bubbles: true,
      cancelable: true,
      clientX,
      clientY,
      view: window,
    });
    target.dispatchEvent(event);
  }

  // console.log(`Start: (${startX}, ${startY}), Target: (${targetX}, ${targetY})`);

  // Start dragging
  triggerMouseEvent(element, "mousedown", startX, startY);

  // Gradual movement
  let currentX = startX;
  let currentY = startY;
  const deltaX = (targetX - startX) / steps;
  const deltaY = (targetY - startY) / steps;

  return new Promise((resolve) => {
    function moveMouse() {
      currentX += deltaX;
      currentY += deltaY;

      triggerMouseEvent(document, "mousemove", currentX, currentY);

      if (Math.abs(currentX - targetX) < Math.abs(deltaX) && Math.abs(currentY - targetY) < Math.abs(deltaY)) {
        // Drop the item at the target
        triggerMouseEvent(document, "mouseup", targetX, targetY);
        //console.log("Drag-and-drop completed.");

        // Force final alignment
        element.style.position = "absolute";
        element.style.left = `${targetX}px`;
        element.style.top = `${targetY}px`;

        resolve();
      } else {
        requestAnimationFrame(moveMouse);
      }
    }

    requestAnimationFrame(moveMouse);
  });
}

async function beat_infinite_craft() {
  const processedPairs = new Set(JSON.parse(localStorage.getItem("processedPairs")) || []);

  function saveProcessedPairs() {
    localStorage.setItem("processedPairs", JSON.stringify(Array.from(processedPairs)));
  }

  async function clickClearButton() {
    const clearBtn = document.getElementsByClassName("clear")[0];
    if (clearBtn) {
      clearBtn.click();
      // console.log("Clear button clicked.");
      // NOTE: If you feel this is too slow modify the 500 to a lower number
      await new Promise((resolve) => setTimeout(resolve, 500)); // Wait for DOM to update
    } else {
      //console.error("Clear button not found.");
    }
  }

  async function processCombination(firstItem, secondItem, targetX, targetY) {
    const firstRect = firstItem.getBoundingClientRect();
    const secondRect = secondItem.getBoundingClientRect();

    const firstStartX = firstRect.x + firstRect.width / 2;
    const firstStartY = firstRect.y + firstRect.height / 2;

    const secondStartX = secondRect.x + secondRect.width / 2;
    const secondStartY = secondRect.y + secondRect.height / 2;

    await simulateDragAndDrop(firstItem, firstStartX, firstStartY, targetX, targetY);
    await simulateDragAndDrop(secondItem, secondStartX, secondStartY, targetX, targetY);
    await clickClearButton();
  }

  async function processItems(itemsRow, x, y) {
    const items = itemsRow.getElementsByClassName("item");
    

    for (let i = 0; i < items.length; i++) {
      for (let j = 0; j < items.length; j++) {
        if (!processedPairs.has(`${i}-${j}`)) {
          processedPairs.add(`${i}-${j}`);
          // saveProcessedPairs();
          await processCombination(items[i], items[j], x, y); // Fixed target position
        }
      }
    }
  }

  let itemsRows = document.getElementsByClassName("items-row");
    if (itemsRows.length === 0) {
        let itemsInner = document.getElementsByClassName("items-inner")[0];
        // NOTE: If it's not working edit the 500 and 100 to different numbers
        // x = left/right lower the number, the more left
        // y = up/down, higher the number, the more up
        // if you're confused, ask chatGPT
        return await processItems(itemsInner, 200, 600);
    }
    
  for (const row of itemsRows) {
    // NOTE: If it's not working edit the 500 and 100 to different numbers
    // x = left/right lower the number, the more left
    // y = up/down, higher the number, the more up
    // if you're confused, ask chatGPT
    await processItems(row, 500, 100);
  }
}
// If it fails, refresh the page and try again lol
await beat_infinite_craft();
